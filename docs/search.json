[
  {
    "objectID": "posts/2025-09-09-duckdb-wasm-proof-of-concept/index.html",
    "href": "posts/2025-09-09-duckdb-wasm-proof-of-concept/index.html",
    "title": "Proof of Concept: Client-side Serverless DuckDB query of cloud bucket storages",
    "section": "",
    "text": "Intro\nThis demonstrates a serverless analytics stack combining Static Site Generation (SSG) with cloud-hosted Parquet datasets via DuckDB WASM. This architecture enables lightweight, cost-effective deployment of static site front ends with integration to cloud data stroage (S3 or other databases) using client-side SQL processing via DuckDB WASM.\nUse Cases:\n\nInteractive dashboards deployed to CDNs\nReal-time analytics on static hosting (Netlify, Vercel, GitHub Pages)\nClient-side data processing without API costs\nScalable data visualization with minimal infrastructure\n\nArchitecture Benefits:\n\nZero server costs (static hosting only)\nAutomatic global CDN distribution\nDirect cloud dataset access\nClient-side SQL processing\n\n\n\n\n\n\n%%{init: {'theme':'neutral'}}%%\ngraph TB\n    subgraph \" \"\n        A[Dashboard Users] --&gt; B[App Server&lt;br/&gt;$500/month]\n        B --&gt; C[DuckDB Server]\n        C --&gt; D[Cloud Storage&lt;br/&gt;$50/month]\n        E[\"Total: $550/month&lt;br/&gt;DevOps maintenance&lt;br/&gt;Manual scaling\"]\n    end\n    \n    subgraph \"  \"\n        F[Dashboard Users] --&gt; G[CDN&lt;br/&gt;$5/month]\n        G --&gt; H[DuckDB WASM&lt;br/&gt;Runs in Browser]\n        H --&gt; I[Cloud Storage&lt;br/&gt;$50/month]\n        J[\"Total: $55/month&lt;br/&gt;Auto-scaling&lt;br/&gt;Global CDN\"]\n    end\n    \n    K[Same Data&lt;br/&gt;Same Queries&lt;br/&gt;Same Results] --&gt; D\n    K --&gt; I\n    \n    style H fill:#4CAF50,color:#000\n    style J fill:#E8F5E8,color:#000\n    style E fill:#FFEBEE,color:#000\n\n\n\n\n\n\n\n\nData Source (Hugging Faces Parquet)\nWe access Parquet files from Hugging Face, an open-science repository with ML-optimized APIs and CORS-enabled endpoints suitable for browser-based applications. However this workflow works with any storage provider (Azure, AWS, GCP, Hugging Face, etc.). We use Hugging Face because it’s a gold standard open-science data repository that is performant and free.\n\n\nTraditional Server-side Pattern (R/Python/Node.js running on server)\nWe can query as we do normally working on a local or cloud comptuer that is running some server; in this case its R code but it could be any language the query syntax is native SQL.\n\nlibrary(duckdb); library(tidyverse)\ncon &lt;- dbConnect(duckdb())\n\nresult &lt;- dbGetQuery(con, \"\n  SELECT * \n  FROM 'https://huggingface.co/datasets/ran-codes/mtcars/resolve/refs%2Fconvert%2Fparquet/default/train/0000.parquet' \n\") |&gt; as_tibble()\n\nresult |&gt; glimpse()\n\nRows: 32\nColumns: 12\n$ model &lt;chr&gt; \"Mazda RX4\", \"Mazda RX4 Wag\", \"Datsun 710\", \"Hornet 4 Drive\", \"H…\n$ mpg   &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8…\n$ cyl   &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8…\n$ disp  &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 1…\n$ hp    &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 18…\n$ drat  &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92…\n$ wt    &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3…\n$ qsec  &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 1…\n$ vs    &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0…\n$ am    &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0…\n$ gear  &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3…\n$ carb  &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2…\n\ndbDisconnect(con)\n\n\n\nServerless/Client-side Pattern (WASM running in browser)\nDuckDB WASM enables SQL processing directly in browsers, eliminating server dependencies. Below is the serverless equivalent of the query from above.\nLet’s first import DuckDB WASM from npm (Javascript package manager).\n\n// Import DuckDB WASM\nduckdb = import(\"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm@1.28.0/+esm\")\n\n\n\n\n\n\nNow we can set up our in browser DuckDB instance/connection. This is a bit more involved than the server-side version because we have to set up a web worker to run the database in a separate thread from the main browser UI thread.\n\n// Initialize with jsDelivr bundles (recommended approach)\ndb = {\n  const JSDELIVR_BUNDLES = duckdb.getJsDelivrBundles();\n  const bundle = await duckdb.selectBundle(JSDELIVR_BUNDLES);\n\n  const worker_url = URL.createObjectURL(\n    new Blob([`importScripts(\"${bundle.mainWorker}\");`], {type: 'text/javascript'})\n  );\n\n  const worker = new Worker(worker_url);\n  const logger = new duckdb.ConsoleLogger();\n  const db = new duckdb.AsyncDuckDB(logger, worker);\n  \n  await db.instantiate(bundle.mainModule, bundle.pthreadWorker);\n  URL.revokeObjectURL(worker_url);\n  \n  return db;\n}\n\n\n\n\n\n\nLooks good. Now we can connect to the cloud data storage and run our query.\n\n// Query S3 Parquet using HTTPS URL\nwasmResult = {\n  const conn = await db.connect();\n  \n  try {\n    const result = await conn.query(`\n      SELECT * \n     FROM 'https://huggingface.co/datasets/ran-codes/mtcars/resolve/refs%2Fconvert%2Fparquet/default/train/0000.parquet'  \n      LIMIT 5\n    `);\n    \n    return result.toArray().map(row =&gt; row.toJSON());\n    \n  } finally {\n    await conn.close();\n  }\n}\n\n\n\n\n\n\nLooks like it worked. Lets print results\n\nwasmResult\n\n\n\n\n\n\n\nInputs.table(wasmResult)\n\n\n\n\n\n\n\n\n\n\nArchitecture Implications\nDeployment Simplicity: - Build once, deploy to any static host - No server provisioning or maintenance - Automatic scaling via CDN\nCost Efficiency: - No compute costs (client-side processing) - No database hosting fees - Pay only for static hosting and data egress\nPerformance Characteristics: - Initial WASM load overhead (~2-3MB) - Subsequent queries run locally - Optimal for &lt;100MB datasets per query\n\n\n\nAppendix: CORS and Cloud Storage\nCORS (Cross-Origin Resource Sharing) controls browser access to cross-domain resources.\nWhy Hugging Face works: - CORS headers allow browser access (Access-Control-Allow-Origin: *) - Optimized for ML/data science integration\nFor custom deployments:\nS3:\n[{\n  \"AllowedOrigins\": [\"https://yourapp.com\"],\n  \"AllowedMethods\": [\"GET\", \"HEAD\"], \n  \"AllowedHeaders\": [\"*\"],\n  \"MaxAgeSeconds\": 3000\n}]\nAzure Blob:\n{\n  \"allowedOrigins\": [\"https://yourapp.com\"],\n  \"allowedMethods\": [\"GET\"],\n  \"maxAgeInSeconds\": 3600\n}\nSecurity note: CORS controls browser access, not authentication. Use signed URLs or IAM policies for data security."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Proof of Concept: Client-side Serverless DuckDB query of cloud bucket storages\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nSep 9, 2025\n\n\nRan Li\n\n\n\n\n\nNo matching items"
  }
]